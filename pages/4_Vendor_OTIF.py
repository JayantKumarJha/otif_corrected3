# -*- coding: utf-8 -*-
"""Production_Experiment3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s5lp5cbhnzsIoDGv9qZRUE9uOKDF3e4m
"""

# pages/4_OTIF_Analysis.py
# -------------------------------------------------------------
# OTIF Analysis page — final version
# - Keep all cleaning & drop-missing logic
# - Last-GRN-per-PO month bucketing
# - Shows only PO-wise yearly OTIF average (plus On-Time, In-Full, Total Orders)
# - PDF download of ALL failed OTIF orders grouped by Supplier (descending)
# - reportlab required for PDF export
# -------------------------------------------------------------

import io
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Try to import reportlab for PDF generation; show helpful message if not installed
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.lib.units import mm
    reportlab_available = True
except Exception:
    reportlab_available = False

# --------------------------- PAGE CONFIG ---------------------------
st.set_page_config(page_title="Vendor OTIF Analysis", page_icon="📦", layout="wide")
st.title("📦 OTIF (On-Time In-Full) Analysis — Order Level")
st.caption(
    "Upload your procurement/GRN Excel → we'll clean it, apply lead-time rules, compute PO-level In-Full, On-Time, and OTIF. "
    "Use the Mat Type checkboxes in the left sidebar. Month bucketing uses the PO's last GRN date."
)

# --------------------------- HARD-CODED ITEM CATEGORY MAP (placeholder) ---------------------------
# Replace/extend this mapping with your real Material Code → Item Category mapping as needed.
df1 = pd.DataFrame({'Material Code': ['4AO005', '1DAT04S', '1DCT01', '2AE06', '2CC02', '4BT021G', '2AB01-C', '4BT008G', '4BT008G', '4BT008G', '4BT011G', '4BT015G', '4BT015G', '4BT019G', '4BT031G', '4BT035G', '4BT036G', '4BT036G', '4BT038G', '4BT050G', '4BT050G', '1FCM01', '2CD09-C', '5DAGB01', '1DCM03', '1FCM03', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '2CD08', '3BG02R', '2AB02', '1ICM01Y', '2AB01-C', '2AB01-C', '2CA07-C', '3CG02', '3CG02', '4CT045G', '2AD01-C', '12OT07', '2CA07-P', '4BO040G', '1FCM03', '4BT017G', '4BT01G', '4BT043G', '1BAM01', '1BAM01', '1BAM01', '1BAM01', '2CC09-C', '9PFSA01-B', '9PFSA03-A', '9PFSA03-A', '4BT036G', '4BT036G', '1DCT01R', '4BO015G', '4BO015G', '1DCT01', '4BO018G', '2CB01-C', '1BAM01', '1DCT01R', '3BG02R', '4BO015G', '4BO015G', '1BCM03', '1DAT04S', '1FAM01', '3BG02', '4BO040G', '4BO040G', '4BT013G', '4BT051G', '1DAT01L', '2AB02', '2AB02', '2AB02', '2CC09-C', '4BO049G', '4BO049G', '4BT003G', '4BT010G', '4BT050G', '2AA01-C', '1DAM01', '1DCT01R', '1FCT01R', '2CA23-C', '2CA23-C', '4BT025G', '1FAM01', '3BS02', '3BS02', '4BO040G', '4BO040G', '7PBA01-A', '7PBA01-A', '7PBB01-B', '7PBB01-B', '7PBB01-C', '4BT011G', '1DAT01L', '1DCT01', '2AA01', '3BG02-U', '4BT025G', '4BT025G', '4BT049G', '4BT049G', '4BT015G', '1FCM03', '1HCM03', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT011G', '4BT035G', '4BT036G', '4BT036G', '1HCM01', '4BT019G', '1CCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '4BT006G', '5DAGB01', '4BT008G', '4BT008G', '4BT008G', '4BT008G', '1DCT01', '2CE02', '2CE02', '2CE02', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '4BT022G', '4BT031G', '4BT035G', '4BT036G', '4BT036G', '4BT036G', '4BT036G', '1HCM01', '1BCM03', '1ICM01', '4BO043G', '4BT034G', '4BT034G', '4BT034G', '2AB07', '4BT008G', '1DAM01', '4AO002', '4BT025G', '1ACT01', '1DCT01R', '1FCT01R', '3AG02', '3BG02R', '4BO015G', '1BCM03', '1DAT01L', '1HCM01', '2AB02', '2AB02', '2AB02', '4BO018G', '4BO01G', '4BO01G', '4BO049', '4BT025G', '2AD02', '4BO049G', '4BO049G', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT008G', '4BT019G', '1FCM01', '1FCM01', '1FCM01', '1FCM01', '2AD02', '2AD02', '2AA02', '3BG02', '1DAT01L', '7PBA01-A', '7PBB01-B', '7PBB01-C', '1BCT01S', '1HCM01', '3BG02', '3BG02', '3BG02', '3BG02', '4BO01G', '4BO049G', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT050G', '1FCM01', '4BO044G', '5DAGB01', '4BT063G', '4BT008G', '1BAM01', '1HAM01', '2AE06', '2CC09-C', '4BO015G', '4BT015G', '4BT050G', '2CA07', '4BT013G', '4BT013G', '4BT038G', '1BCT01S', '1BCT01S', '2AA02', '4BO01', '1ECM03', '4BT006G', '1BCM03', '2CC09-C', '2CE04', '4BT034G', '4BT034G', '1DAM01', '1FCM01', '2CC09', '2CC09', '4BO031G', '4BO044G', '1CCM03', '1CCM03', '2AE02', '1DCT01R', '1FCT01R', '2AC07', '2CB01-C', '4BO015G', '1DCM03', '1DCM03', '1DCM03', '1DAM03', '1ICM01', '2CD08', '2CD08', '4BO01G', '4BO044G', '4BT025G', '1ECM03', '4BT008G', '4BT011G', '4BT045G', '1BCT01S', '1BCT01S', '1BCT01S', '1DAT01L', '2AB07', '4BT021G', '4BT02G', '7PBB04-A', '7PBB04-B', '7PBB04-C', '2CD09-C', '1HCM03', '4BT036G', '1DAM01', '1DAT04S', '1HCM01', '2AC07', '2CE02', '4BO015G', '4BO031G', '4BO044G', '4BT021G', '4BT021G', '4BT021G', '1DAM03', '4BO049G', '4BT025G', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '1ACT01', '3AG04', '3AG04', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4AT003G', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT021G', '4BT008G', '4BT011G', '1FCM01', '2AD02', '4BT015G', '5DAGB01', '9PFSA01-B', '9PFSA01-B', '9PFSA03-A', '9PFSA03-A', '1DCM01', '2CD08', '4BT024G', '1DCM03', '4BT036G', '4BT063G', '2CB01-C', '2CD09-C', '2CE04', '4BT008G', '4BT011G', '4BT036G', '4BT038G', '4BT050G', '1BCM03', '4BT011G', '1DCM03', '5CAGB01', '6C02', '2AB01-C', '2AD02', '2AA01-C', '4BO015G', '1CCM03', '4BT008G', '4BT008G', '4BT022G', '4BT015G', '4AO005G', '4BT034G', '4BT016G', '1BAM01', '1ECT01R', '1HCM01', '2AA01-C', '2CC09', '4BO044G', '4BT015G', '4BT021G', '7PBC01-A', '4BT006G', '1BCM03', '1BCM03', '1BCM03', '1BCM03', '1BCM03', '1BCM03', '1DAT04S', '1DAT04S', '1FCM01', '2CE10-C', '4BO044G', '4BT011G', '4BT033G', '1BAM01', '1DCT01', '4BT02G', '7PBA01-A', '7PBB01-B', '7PBB01-C', '1CCM03', '1DCM03', '1FCM01', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1HCM01', '1HCM01', '1HCM03', '1HCM03', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '1ACT01', '1BCM03', '1BCM03', '1BCM03', '1BCM03', '1BCM03', '1BCM03', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1DAM01', '1DCM03', '1FCM01', '1HCM01', '1HCM01', '1ICM01', '2AA01-C', '2AB01-C', '2AB02', '2AB02', '2AD02', '2AD02', '2AD02', '2AD02', '2AE02', '2CA07-C', '2CB01-C', '2CC09-C', '2CD08', '2CD08', '2CD09-C', '2CD09-C', '2CD09-C', '2CD09-C', '2CE02', '2CE02', '2CE10-C', '3AG02', '3AG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3CG02', '3CG02', '3CG02', '3CG02', '4BT02G', '4BT02G', '1FCT02', '1HCM03', '3BG06', '3BG06', '3BG06', '3BG06', '3BG06', '3BG06', '4BT015G', '4BT065', '4BT065', '4BT066', '4BT066', '4BT021G', '4BT011G', '4BT013G', '4BT033G', '4BT033G', '4BT033G', '4BT008G', '4BT008G', '2AB07', '2AE06', '2CD09-C', '2CD09-C', '2CD09-C', '2CD09-C', '4BT033G', '4BT033G', '4BT033G', '1FCM01', '4BO044G', '4BT006G', '4BT008G', '4BT008G', '1DAM03', '1DCT01R', '1FCT01R', '4BO015G', '4BO015G', '4BT034G', '4BT034G', '4BT034G', '7PBB04-A', '7PBB04-B', '7PBB04-C', '4BT019G', '4BT02G', '4BT02G', '7PBB04-A', '7PBB04-B', '7PBB04-C', '4BT003G', '4BT011G', '4BT013G', '4BT019G', '4BT032G', '4BT051G', '1DCM01', '4BO015G', '4BO015G', '4BO01G', '4BO01G', '4BO01G', '4BO044G', '4BT011G', '4BT011G', '4BT015G', '4BT015G', '4BT021G', '4BT021G', '4BT021G', '4BT025G', '4BT025G', '4BT025G', '4BT02G', '4BT02G', '4BT033G', '4BT033G', '4BT034G', '4BT034G', '4BT034G', '1BAM01', '4BT034G', '4BT034G', '4BT034G', '2CA07-C', '1FAM01', '4BO040G', '4BO040G', '4BT008G', '4BT008G', '4BT011G', '2AB02', '2AB02', '2AB02', '2AB02', '5DAGB01', '7PBB01-A', '4BT009G', '2CC09', '9PFSA01-B', '9PFSA01-B', '9PFSA03-A', '1DCM03', '2AD02', '2AD02', '2CE10-C', '3BG05', '4BT019G', '1BCM03', '1HAM01', '4BO018G', '4BO055G', '7PBB01-A', '7PBB01-B', '7PBB01-C', '4BT015G', '3BG04', '4BT008G', '4BT008G', '4BT008G', '9PFSA06-A', '9PFSA06-B', '9PFSA06-C', '9PFSA06-D', '1HCM03', '1HCM03', '4BT011G', '4BT011G', '4BT013G', '1DAM01', '1IAM01', '1ICM01Y', '2AB07', '2CD07', '3CG02', '3CG02', '3CG02', '3CG02', '4BO058G', '4CT002G', '4CT002G', '5CAGB01', '5DAGB01', '6C02', '7PBB04-A', '7PBB04-B', '7PBB04-C', '8CP06', '9PL01', '2AD02', '2CE02', '4BT021G', '4BT021G', '4BT021G', '4BT022G', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1DCT01', '1HCM01', '2AA01-C', '2AB02', '2AB02', '2AD01-C', '4AO043G', '1DCM03', '4BT015G', '4BT015G', '1DAT01L', '1DCM03', '2AB02', '2AB02', '4AO001G', '1FCM03', '4BT008G', '4BT008G', '4BT008G', '4BT036G', '1FCM01', '2AE06', '2AE06', '1CCM03', '4BT063G', '1FAM01', '1BAM01', '2AA01-C', '1DCM03', '1BCM03', '1HCM01', '2AA01-C', '2AB01-C', '2AD02', '2AD02', '2CA02', '2CB01-C', '2CD09-C', '4BT034G', '7PBB02-A', '7PBB02-B', '7PBB02-C', '1ACT01', '1ACT01', '3AG02', '3AG02', '3AG02', '3AG02', '4AO005G', '4AO005G', '1FAT01', '2CE08-C', '4BT008G', '7PBB04-A', '7PBB04-B', '2AA01-C', '2AB01-C', '2CB01-C', '2CD09-C', '1BAT01', '2CB01-C', '4BT063G', '1DCT01R', '1FCT01R', '2AD01-C', '3BG02', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1FCM03', '1HCM03', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '4BT02G', '4BT02G', '4BT02G', '4BT02G', '4BT02G', '4BT02G', '4BT02G', '1FCM01', '1FCM01', '1FCM01', '1FCM03', '2AD02', '2AD02', '2CA07-C', '2CA27', '2CC02', '4AO001G', '4BO01G', '4BO01G', '4BT011G', '4BT025G', '1BAM01', '4BO034G', '4BO034G', '4BT068G', '2CC09-C', '2CD02', '2CD02', '2CD02', '7PBA01-A', '7PBB01-B', '7PBB01-C', '1DAM03', '1DCM01', '4BT008G', '4BT008G', '4BT008G', '4BT011G', '4BT013G', '4BT015G', '4BT022G', '4BT022G', '4BT022G', '4BT036G', '4BT036G', '4BT036G', '4BT050G', '4BT063G', '2CA07-C', '2CB01-C', '1DCM03', '2AE02', '1FCM03', '4AO005G', '4AO005G', '7PBB01-B', '7PBB01-C', '1FCM03', '1HCM03', '4BT008G', '4BT011G', '4BT011G', '4BT011G', '4BT013G', '4BT015G', '4BT019G', '4BT043G', '1BAM01', '4BT011G', '4BT036G', '4BT050G', '1DCM03', '1DCM03', '1DCM03', '1FCM03', '1FCM03', '1BCM03', '1DAM03', '2CE02', '2CE02', '2CE02', '2CE02', '4BT005G', '4BT034G', '4BT034G', '4BT034G', '1FCM01', '4BO044G', '4BT011G', '4BT050G', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '1FAM01', '1FAM01', '1FCM01', '2AD02', '2AD02', '2CA07', '2CE10-C', '3BS02', '2CE02', '2CE02', '2CE02', '2CE02', '4BT006G', '1DCT01', '2AB02', '2AD02', '2AD02', '2AD02', '3AC02', '3BG04', '4BT034G', '4BT034G', '4BT034G', '2CB01', '4BT008G', '4BT008G', '4BT063G', '2AB01-C', '5DAGB01', '5DAGB01', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT008G', '4BT008G', '4BT016G', '4BT036G', '1FCM03', '1FCM03', '1HCM03', '3BG07', '3BG07', '1BAM01', '2CC09-C', '2CE02', '2CE02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '1DAM03', '1DCT01', '2AE06', '4AO001G', '1DCM03', '1DCM03', '1DCM03', '1DCM03', '1DCM03', '1HAM01', '2AA01-C', '2CA07-C', '4BO055G', '1DAT01L', '4BO049G', '1ACT01', '1BCM03', '4AO002G', '4BT034G', '4BT034G', '4BT034G', '4BT034G', '1BCT01', '1DCM03', '2CC09', '2CE08-C', '4BT011G', '4BT011G', '4BT049G', '4BT003G', '4BT032G', '4BT050G', '1BAM01', '1DAM01', '2CD02', '2CD02-LE', '4BO031G', '7PBB04-A', '7PBB04-B', '4BT048G', '1DAM03', '2CC09-C', '2CD02-LE', '2CD02-LE', '2CE08-C', '4AO043G', '4AO043G', '7PBB02-A', '7PBB02-B', '7PBB02-C', '4BT017G', '4BT017G', '4BT01G', '4BT022G', '4BT022G', '4BT022G', '1DCM01', '2AB07', '2CE10-C', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '7PBB04-A', '7PBB04-B', '1BAM01', '2CC09', '2CD04', '4BT024G', '4BT02G', '7PBA01-A', '7PBB01-B', '7PBB01-B', '7PBB01-C', '4BT008G', '4BT008G', '4BT008G', '4BT021G', '2AB01-C', '2CD02', '2CD02', '1DCM03', '12OT11', '12OT11', '12OT11', '12OT11', '12OT11', '12OT11', '2CA07-C', '2CB01-C', '2CD02', '2CD02', '2CD02', '2CD02', '4BO036', '1HAM01', '2AB01-C', '2CE10', '4BO055G', '4BO01G', '4BO01G', '4BT021G', '4BT021G', '4BT021G', '4BT021G', '4BT021G', '4BT021G', '4BT021G', '4BT015G', '4BT015G', '4BT015G', '4BT022G', '4BT022G', '2CC09-C', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '2CB01-C', '1DCT01-PB', '1JCT01-PB', '2CB34-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '3BG02-PB', '4BO036-PB', '4BO043-PB', '4BO061-PB', '4BO063-PB', '4BT011G', '4BT019G', '4BT019G', '2AB07', '2AE02', '4BT006G', '4BT009G', '4BT009G', '4BT012G', '1DCT01R', '1BAM01', '4BO034G', '4BT025G', '2CC09-C', '1DCM03', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT008G', '4BT015G', '4BT050G', '4BT036G', '4BT036G', '4BT036G', '4BT025G', '4BT025G', '4BT025G', '4BT025G', '2CD02', '4BT022G', '2AB02', '2AB02', '2AD02', '2AD02', '4BT021G', '3AG02', '1FAM01', '2CA07-C', '4BO015G', '4BO015G', '2AA01-C', '1DCM03', '1DCM03', '1DCM03', '1DCM03', '1FCM03', '4BO013G', '4BT022G', '4BT022G', '2CD02', '2CD02', '2CD02', '4BT036G', '4BT036G', '7PBA01-A', '7PBB01-B', '7PBB01-C', '2AD08', '3BS02', '1FCM01', '4BO044G', '3BG08', '3BG08', '5DAGB01', '6C01', '6C02', '1DCM03', '1DCM03', '1HCM03', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT015G', '1DAM03', '1DAM03', '2CA23-C', '7PBB04-A', '7PBB04-B', '1BCT01-G', '1DCT01-G', '3BG04-G', '4BT019-G', '5CAGB01', '4BT036G', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '1FCM01', '2AA01-C', '4BO044G', '1DCM03', '1DCM03', '1DCM03', '1DCM03', '1DCM03', '1DCM03', '1DCM03', '1FCM03', '1DCM01', '1DCM03', '4BT008G', '4BT008G', '4BT008G', '4BT011G', '4BT015G', '4BT015G', '2CA07', '2CC02', '2CC09', '9PFSA01-B', '9PFSA03-A', '9PFSA03-A', '9PFSA03-A', '2AA02', '4BT011G', '4BT013G', '4BT063G', '2CD08-EP', '4BO044G', '1ICM01-G', '2CC09-C', '1BCT01', '4BO018G', '7PBA01-A', '7PBB01-B', '7PBB01-C', '7PBB01-C', '1BCM03', '2AA01-C', '4BT034G', '4BT034G', '4BT034G', '4BT021G', '1CCM03', '2AC07', '1BCM03', '1BCM03', '1DAM03', '4BT034G', '1BCM03', '2CC09', '2CC09', '1HCM03', '4BT008G', '4BT008G', '2CE02', '2CE02', '2CE02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT021G', '4BT021G', '4BT021G', '4BT021G', '4BT021G', '7PBB04-A', '7PBB04-A', '7PBB04-A', '7PBB04-A', '7PBB04-A', '7PBB04-A', '7PBB04-A', '7PBB04-B', '7PBB04-B', '7PBB04-B', '7PBB04-B', '7PBB04-B', '7PBB04-B', '7PBB04-B', '1DCM03', '1DCM03', '4BT006G', '4BT008G', '4BT008G', '4BT02G', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '2CE02', '4BT02G', '1DCM03', '1DCM03', '4BT011G', '4BT011G', '4BT011G', '4BT050G', '2CA07-C', '4AO004G', '4BT006G', '4BT006G', '1DAM01', '1DCM03', '1FCM03', '1HAM01', '1HCM01', '1ICM01', '1ICM01', '2CB01', '2CC09-C', '4BO015G', '4BO055G', '4BT011G', '4BT025G', '4BT025G', '1DCM04', '9PFSA01-B', '9PFSA01-B', '9PFSA03-A', '1FAM01', '1FAM01', '2AD01-C', '2AD01-C', '4BO040G', '4BO036-PB', '4BO043-PB', '4BO061-PB', '4BO063-PB', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT008G', '4BT008G', '4BT008G', '4BT008G', '4BT008G', '4BT008G', '4BT008G', '4BT008G', '2CE10', '2CE10', '4BT015G', '2AA02', '4BO031G', '4BT034G', '4BT034G', '4BT034G', '4BT034G', '1BCM03', '1DCT01R', '1ECT01R', '2AD01-C', '2AD01-C', '7PBB01-A', '7PBB01-B', '7PBB01-C', '4AO004', '1DCM01', '1FAM01', '4BT021G', '4BT021G', '4BT021G', '4BT021G', '4BT024G', '1FCM03', '4BT013G', '4BT013G', '4BT013G', '4BT015G', '1BAM01', '4BT02G', '4BT02G', '1BCM03', '1DCM03', '1DCM03', '1ACT01', '3AG02', '3AG02', '3AG02', '3AG02', '4AO001G', '4AO002G', '4BT006G', '6C02', '2CA07', '1BCT01X', '2CE10', '2CE10', '1IAM01', '2AE02', '4BO058G', '7PBB02-A', '7PBB02-B', '7PBB02-C', '4BT008G', '1BCM03', '1BCM03', '1DAT01S', '3BG02', '3BG02', '3BG02', '3BG02', '4BT025G', '4BT025G', '4BT034G', '1HCM03', '4BT015G', '1BAM01', '2AA01-C', '2AD01-C', '2AD01-C', '2CA07-C', '1BCM03', '1BCM03', '1BCM03', '1BCM03', '2CB01-C', '2CB01-C', '2CD08', '4BT011G', '2AA02', '2AD02', '2AD02', '2AD02', '8CP06', '9PFSA01-B', '9PFSA03-A', '9PL01', '1DCT01', '2CC09', '1FCM01', '1FCM01', '1BAM01', '2CC09-C', '2CC09-C', '2CC09-C', '4BT021G', '4BT021G', '1DAT01L', '1DCM03', '4BT021G', '4BT021G', '4BT021G', '5DAGB01', '4BT017G', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1BCT01S', '1FCM03', '4BT02G', '4BT02G', '4BT02G', '4BT02G', '4BT02G', '7PBB02-A', '7PBB02-B', '7PBB02-C', '2AB02', '2AB02', '1DAM01', '1DAM01', '4BT034G', '4BT034G', '2AD01-C', '1DCM03', '1DCM03', '1DCT01R', '1FCT01R', '2CE10', '2CE10', '3BG04', '4BO015G', '1BCM03', '1BCM03', '1DCM03', '1DCM03', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT011G', '4BT011G', '4BT011G', '4BT011G', '4BT011G', '4BT011G', '4BT011G', '4BT011G', '4BT033G', '4BT033G', '4BT033G', '4BT033G', '4BT033G', '4BT033G', '4BT033G', '2AB05', '2AB05', '1FCM01', '1FCM03', '1FCM03', '1FCM03', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '1HCM03', '2AA01-C', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT033G', '4BT02G', '4BT048G', '2AD01-C', '2CC02', '7PBB02-A', '7PBB02-A', '7PBB02-A', '7PBB02-B', '7PBB02-B', '7PBB02-B', '7PBB02-C', '7PBB02-C', '4BT011G', '2AB35', '2AB35', '2CA07', '2CA07', '2CB01-C', '2CD04', '1DAM03', '4BO040G', '2CA07', '3AC02', '4AO044G', '4BT036G', '1FAM01', '2AB07', '5CAGB01', '2AA01-C', '3BG10', '4BT065G', '4BT066G', '1BAM01', '1DAT01L', '1DCT01R', '2AB01-C', '2AB01-C', '2AD02', '1DCM03', '1ECM03', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '4BT017G', '2CD02', '2CD02', '2CD02', '1CCM03', '10CTC01', '1FCT01R', '1FCT01R', '2AA02', '4BT008G', '2AD02', '4BT050G', '4BT034G', '1BAM01', '2AB01-C', '4BT015G', '7PBA01-A', '7PBB01-B', '7PBB01-C', '1HCM03', '1HCM03', '4BT008G', '4BT008G', '4BT008G', '4BT008G', '4BT036G', '1CCM03', '2CD02', '4BT011G', '4BT013G', '4BT050G', '2CD08', '1FCM01', '4AO001G', '4BO015G', '4BO044G', '5CAGB01', '6C01', '7PBA01-A', '7PBB01-B', '7PBB01-C', '8CP06', '9PL01', '6C02', '3BG02', '3BG02', '3BG02', '3BG02', '3BG02', '1BCM03', '1DAT01L', '2AA01-C', '4BT033G', '2CC09', '1DCM03', '2AD04-K', '4BT015G', '4BT035G', '1FCM01', '1FCM01', '1FCM01', '4BO044G', '1DCT01', '1DCT01R', '1BCT01X', '4AT002G', '4BT02G', '1BCT01S', '1FCM01', '2CD02', '9PFSA01-B', '9PFSA01-B', '9PFSA03-A', '9PFSA03-A', '3BG02', '3BG02', '3BG02', '9PCCC01-NA', '9PCCC02-NA', '1FCM03', '4BT063G', '7PBA01-A', '7PBB01-B', '7PBB01-C', '1DCT01R', '1FCT01R', '2CB01-C', '4BO015G', '1DAM03', '4BO031G', '1HCM03', '4BT015G', '4BT036G', '4BT034G', '1FAM01', '9PCCC01-NA', '9PCCC02-NA'], 'Item Category': ['Seal', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Cap', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Rubber Stopper', 'Ampoule', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Ampoule', 'Al Tube', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Plunger Stopper', 'PFS Syringe', 'PFS Syringe', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Vial', 'Seal', 'Ampoule', 'Vial', 'Vial', 'Rubber Stopper', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Plastic Bottles', 'Plastic Bottles', 'Cap', 'Cap', 'Plastic Nozzle', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Seal', 'Cap', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Seal', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Vial', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Vial', 'Seal', 'Cap', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Outer cap', 'Ampoule', 'Vial', 'Seal', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Seal', 'Cap', 'Plunger Stopper', 'Plunger Stopper', 'PFS Syringe', 'PFS Syringe', 'Vial', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Vial', 'Cap', 'Collar', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Plastic Bottles', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Outer cap', 'Seal', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Outer cap', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Cap', 'Plastic Bottles', 'Seal', 'Ampoule', 'Plunger Stopper', 'Plunger Stopper', 'PFS Syringe', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Seal', 'Vial', 'Vial', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Seal', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Plunger Rod', 'Plunger Rod', 'Plunger Rod', 'Plunger Rod', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Cap', 'Cap', 'Collar', 'Plastic Bottles', 'Cap', 'Plunger Rod', 'Cap', 'U plug', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Vial', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Seal', 'Plastic Bottles', 'Cap', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Vial', 'Ampoule', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Rubber Stopper', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Vial', 'Ampoule', 'Vial', 'Seal', 'Seal', 'Cap', 'Plastic Nozzle', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Cap', 'Cap', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Plastic Bottles', 'Cap', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Plastic Bottles', 'Cap', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Cap', 'Plastic Nozzle', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Vial', 'Al Tube', 'Al Tube', 'Al Tube', 'Al Tube', 'Al Tube', 'Al Tube', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Ampoule', 'Vial', 'Vial', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Seal', 'Seal', 'Ampoule', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Rubber Stopper', 'Vial', 'Ampoule', 'Seal', 'Seal', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Ampoule', 'Rubber Stopper', 'Vial', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Cap', 'Collar', 'Collar', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Plastic Bottles', 'Cap', 'Vial', 'Vial', 'Rubber Stopper', 'Seal', 'Cap', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Ampoule', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Plunger Stopper', 'PFS Syringe', 'PFS Syringe', 'PFS Syringe', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Seal', 'Vial', 'Ampoule', 'Vial', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Plastic Nozzle', 'Vial', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Vial', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Plastic Bottles', 'Plastic Bottles', 'Plastic Bottles', 'Plastic Bottles', 'Plastic Bottles', 'Plastic Bottles', 'Plastic Bottles', 'Cap', 'Cap', 'Cap', 'Cap', 'Cap', 'Cap', 'Cap', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Plunger Stopper', 'Plunger Stopper', 'PFS Syringe', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Seal', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Seal', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Collar', 'Ampoule', 'Vial', 'Ampoule', 'Ampoule', 'Vial', 'Ampoule', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Seal', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Vial', 'Seal', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Cap', 'Plunger Stopper', 'PFS Syringe', 'U plug', 'Vial', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Seal', 'Seal', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Cap', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Ampoule', 'Ampoule', 'Vial', 'Vial', 'Seal', 'Seal', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Rubber Stopper', 'Seal', 'Vial', 'Vial', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Ampoule', 'Plastic Bottles', 'Plastic Bottles', 'Plastic Bottles', 'Cap', 'Cap', 'Cap', 'Plastic Nozzle', 'Plastic Nozzle', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Ampoule', 'Vial', 'Seal', 'Ampoule', 'Rubber Stopper', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Cap', 'Ampoule', 'Rubber Stopper', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Ampoule', 'Ampoule', 'Ampoule', 'Vial', 'Vial', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Seal', 'Ampoule', 'Ampoule', 'Ampoule', 'Vial', 'Plunger Rod', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Ampoule', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Vial', 'Vial', 'Seal', 'Seal', 'Seal', 'Seal', 'Seal', 'Vial', 'Ampoule', 'Seal', 'Seal', 'Seal', 'Ampoule', 'Vial', 'Seal', 'Seal', 'Seal', 'Cap', 'Collar', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Cap', 'U plug', 'Collar', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Ampoule', 'Vial', 'Ampoule', 'Seal', 'Seal', 'Vial', 'Vial', 'Vial', 'Seal', 'Vial', 'Vial', 'Vial', 'Seal', 'Seal', 'Vial', 'Vial', 'Ampoule', 'Plunger Stopper', 'Plunger Stopper', 'PFS Syringe', 'PFS Syringe', 'Rubber Stopper', 'Rubber Stopper', 'Rubber Stopper', 'Plunger Rod', 'Rubber Stopper', 'Vial', 'Seal', 'Plastic Bottles', 'Cap', 'Plastic Nozzle', 'Vial', 'Vial', 'Ampoule', 'Seal', 'Vial', 'Seal', 'Vial', 'Seal', 'Seal', 'Seal', 'Vial', 'Plunger Rod', 'Rubber Stopper']})


# --------------------------- CONSTANTS ---------------------------
REQUIRED_COLS = [
    "Mat Type", "Material Code", "Material Name", "UOM",
    "P.O. Dt", "P. O. No", "Supplier", "PO Qty", "GNR Dt", "Inward Qty"
]

# Base lead times for known types (defaults; user can override unknown types via sidebar)
DEFAULT_RULES = {"RM": 30, "SPM": 15, "TPM": 15}
DEFAULT_PPM_LT = 30

# PPM category → days (exact-match values used against Item Category, case-insensitive)
PPM_CATEGORY_MAP = {
    7:  ['Vial', 'Rubber Stopper', 'Rubber', 'Stopper', 'Seal', 'Cap', 'Collar', 'Inner Cap', 'Outer Cap'],
    12: ['Ampoule', 'Amp'],
    90: ['Pfs Syringe', 'Plunger Stopper', 'Plunger', 'U plug', 'U-plug'],
    15: ['Al Tube', 'Plastic Bottle', 'Plastic Nozzle', 'Nozzle'],
}

# --------------------------- HELPERS ---------------------------
def clean_columns(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df.columns = (
        df.columns
        .str.strip()
        .str.replace(r"\s+", " ", regex=True)
        .str.replace(r"\u00A0", " ", regex=True)
        .str.strip(".")
        .str.strip()
    )
    if df.columns.duplicated().any():
        df = df.loc[:, ~df.columns.duplicated()]
    return df

def validate_required_columns(df: pd.DataFrame):
    return [c for c in REQUIRED_COLS if c not in df.columns]

def compute_lead_time_for_row(row: pd.Series, rules: dict):
    mat_type = str(row.get("Mat Type", "")).strip().upper()
    if mat_type in rules:
        return rules[mat_type]
    if mat_type == "PPM":
        item_cat = str(row.get("Item Category", "") or "").strip()
        if item_cat:
            low = item_cat.lower()
            for lt, cats in PPM_CATEGORY_MAP.items():
                if low in [c.lower() for c in cats]:
                    return lt
        return DEFAULT_PPM_LT
    return np.nan

@st.cache_data(show_spinner=True)
def load_and_clean(file) -> pd.DataFrame:
    df = pd.read_excel(file)
    df = clean_columns(df)
    missing = validate_required_columns(df)
    if missing:
        raise ValueError(f"Input file missing required columns: {missing}")
    extras = [c for c in ["Item Category"] if c in df.columns]
    df = df[REQUIRED_COLS + extras].copy()
    return df

def ensure_types_and_drop_nulls(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df["P.O. Dt"] = pd.to_datetime(df["P.O. Dt"], errors="coerce", dayfirst=True)
    df["GNR Dt"] = pd.to_datetime(df["GNR Dt"], errors="coerce", dayfirst=True)
    df["PO Qty"] = pd.to_numeric(df["PO Qty"], errors="coerce")
    df["Inward Qty"] = pd.to_numeric(df["Inward Qty"], errors="coerce")
    df = df.dropna(subset=["P.O. Dt", "GNR Dt", "PO Qty", "Inward Qty"]).copy()
    return df

def merge_item_category(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    if "Item Category" not in df.columns:
        df = df.merge(df1, on="Material Code", how="left")
    else:
        df = df.merge(df1, on="Material Code", how="left", suffixes=("", "_map"))
        if "Item Category_map" in df.columns:
            df["Item Category"] = df["Item Category"].fillna(df["Item Category_map"])
            df.drop(columns=["Item Category_map"], inplace=True, errors="ignore")
    df["Item Category"] = df["Item Category"].fillna("")
    return df

def compute_po_level_metrics(df: pd.DataFrame):
    # Product-level fulfillment (sum duplicates)
    df_po_item = (
        df.groupby(["P. O. No", "Material Code"], as_index=False)
          .agg({"PO Qty": "sum", "Inward Qty": "sum"})
    )
    df_po_item["Fulfilled"] = (df_po_item["Inward Qty"] >= 0.95 * df_po_item["PO Qty"]).astype(int)

    # PO-level In-Full
    df_po_status = (
        df_po_item.groupby("P. O. No")["Fulfilled"]
                  .min()
                  .reset_index()
                  .rename(columns={"Fulfilled": "PO_Fulfilled"})
    )
    df_line = df.merge(df_po_status, on="P. O. No", how="left")

    # PO-level On-Time
    def po_ontime(group: pd.DataFrame) -> int:
        due_dates = group["P.O. Dt"] + pd.to_timedelta(group["Lead Time"], unit="D")
        return int((group["GNR Dt"] <= due_dates).all())

    po_ontime_df = df_line.groupby("P. O. No").apply(po_ontime).reset_index(name="OnTime")
    df_line = df_line.merge(po_ontime_df, on="P. O. No", how="left")

    # Collapse to one-row-per-PO (keep other PO-level columns)
    df_po = df_line.drop_duplicates(subset=["P. O. No"]).copy()
    df_po["OTIF"] = (df_po["PO_Fulfilled"].astype(int) * df_po["OnTime"].astype(int)).astype(int)

    # Use LAST GRN date per PO for bucketing
    po_last_grn = (
        df.groupby("P. O. No", as_index=False)["GNR Dt"]
          .max()
          .rename(columns={"GNR Dt": "PO_GNR_Dt"})
    )
    df_po = df_po.merge(po_last_grn, on="P. O. No", how="left")
    df_po["GNR Dt"] = pd.to_datetime(df_po["PO_GNR_Dt"])
    df_po.drop(columns=["PO_GNR_Dt"], inplace=True)

    # Add Year/Month parts
    df_po["Year"] = df_po["GNR Dt"].dt.year
    df_po["MonthNum"] = df_po["GNR Dt"].dt.month
    df_po["Month"] = df_po["GNR Dt"].dt.strftime("%b")

    return df_line, df_po

def generate_failed_orders_pdf(breaches_df: pd.DataFrame, year: int) -> bytes:
    """
    Create a PDF listing all failed OTIF orders grouped by Supplier.
    Vendors ordered by number of failed orders (descending).
    Each vendor shows failed orders sorted by date (desc).
    """
    if not reportlab_available:
        raise RuntimeError("reportlab not available")

    buf = io.BytesIO()
    width, height = A4
    c = canvas.Canvas(buf, pagesize=A4)
    margin_x = 20 * mm
    y = height - 20 * mm
    line_height = 8 * mm

    # Title
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin_x, y, f"ALL OTIF FAILED ORDERS — {year}")
    y -= 12 * mm

    # Group vendors by breach counts descending
    vendor_counts = breaches_df.groupby("Supplier").size().reset_index(name="count").sort_values("count", ascending=False)

    vendor_idx = 1
    for _, row in vendor_counts.iterrows():
        vendor = row["Supplier"]
        vendor_group = breaches_df[breaches_df["Supplier"] == vendor].sort_values("GNR Dt", ascending=False)

        # Vendor heading
        if y < 40 * mm:
            c.showPage()
            y = height - 20 * mm
            c.setFont("Helvetica-Bold", 16)
            c.drawString(margin_x, y, f"ALL OTIF FAILED ORDERS — {year} (cont.)")
            y -= 12 * mm

        c.setFont("Helvetica-Bold", 12)
        c.drawString(margin_x, y, f"{vendor_idx}. {vendor}  (Failures: {len(vendor_group)})")
        y -= line_height

        # List orders under vendor
        c.setFont("Helvetica", 10)
        for _, orow in vendor_group.iterrows():
            ord_date = orow.get("GNR Dt")
            if pd.isna(ord_date):
                date_str = ""
            else:
                date_str = pd.to_datetime(ord_date).strftime("%d-%m-%Y")
            po_no = str(orow.get("P. O. No", ""))
            line_text = f"    {date_str}    {po_no}"
            # wrap if long (simple)
            c.drawString(margin_x + 6 * mm, y, line_text)
            y -= (6 * mm)
            if y < 25 * mm:
                c.showPage()
                y = height - 20 * mm
                c.setFont("Helvetica", 10)
        y -= 4 * mm
        vendor_idx += 1

    c.save()
    buf.seek(0)
    return buf.getvalue()

# --------------------------- MAIN ---------------------------
if not st.session_state.get("data_file_loaded"):
    # Show file uploader
    data_file = st.file_uploader("📤 Upload OTIF Excel (single sheet expected)", type=["xlsx", "xls"])
else:
    data_file = None  # placeholder; we'll set when user uploads

data_file = st.session_state.get("uploaded_file", None) if "uploaded_file" in st.session_state else data_file

# If user uploads
if data_file is not None:
    st.session_state["uploaded_file"] = data_file
    st.session_state["data_file_loaded"] = True

if not st.session_state.get("data_file_loaded"):
    st.info("Upload your Excel to begin. Expected columns: Mat Type, Material Code, Material Name, UOM, P.O. Dt, P. O. No, Supplier, PO Qty, GNR Dt, Inward Qty.")
    st.stop()

# Load & clean incoming file
try:
    df_raw = load_and_clean(st.session_state["uploaded_file"])
except Exception as e:
    st.error(f"❌ Processing error: {e}")
    st.stop()

if df_raw.empty:
    st.warning("No rows found after basic load.")
    st.stop()

# Sidebar: Mat Type selection (checkboxes)
st.sidebar.header("🎛 Mat Type Filters & Lead Times")
all_types = sorted(df_raw["Mat Type"].dropna().astype(str).unique().tolist())
select_all = st.sidebar.checkbox("Select ALL Mat Types", value=True)
selected_types = []

if select_all:
    selected_types = all_types
else:
    st.sidebar.caption("Tick the Mat Types you want to include:")
    for t in all_types:
        if st.sidebar.checkbox(f"{t}", value=False, key=f"mt_{t}"):
            selected_types.append(t)

if not selected_types:
    st.warning("Please select at least one Mat Type from the sidebar.")
    st.stop()

# 3) Filter to chosen Mat Types
df = df_raw[df_raw["Mat Type"].astype(str).isin(selected_types)].copy()
if df.empty:
    st.warning("No rows remain after Mat Type filtering.")
    st.stop()

# 4) Convert dtypes & drop critical nulls
df = ensure_types_and_drop_nulls(df)
if df.empty:
    st.warning("No rows remain after dropping records with missing dates/quantities.")
    st.stop()

# 5) Merge Item Category mapping
df = merge_item_category(df)

# 6) Lead time rules: start with defaults and prompt for unknown selected types (except PPM)
lead_time_rules = DEFAULT_RULES.copy()
unknown_selected = [t for t in selected_types if t.upper() not in lead_time_rules and t.upper() != "PPM"]

if unknown_selected:
    st.sidebar.subheader("⏱ Lead Time (days) for other Mat Types")
for t in unknown_selected:
    lead_time_rules[t.upper()] = st.sidebar.number_input(
        f"Lead Time for {t}", min_value=1, max_value=365, value=30, step=1, key=f"lt_{t}"
    )

# 7) Compute Lead Time for each row
df["Lead Time"] = df.apply(lambda row: compute_lead_time_for_row(row, lead_time_rules), axis=1)
if df["Lead Time"].isna().any():
    bad = df.loc[df["Lead Time"].isna(), "Mat Type"].unique().tolist()
    st.error(f"Lead Time missing for Mat Types: {bad}. Please provide values in the sidebar.")
    st.stop()

# 8) PO-level metrics
df_line, df_po = compute_po_level_metrics(df)
if df_po.empty:
    st.warning("No P.O. rows available after processing.")
    st.stop()

# 9) Year selector & monthly summary (using last GRN date per PO already)
years = sorted(df_po["Year"].dropna().unique().astype(int).tolist())
if not years:
    st.error("No valid 'GNR Dt' years found after processing.")
    st.stop()

selected_year = st.selectbox("📅 Select Year", years, index=len(years)-1)
po_year = df_po[df_po["Year"] == selected_year].copy()

monthly = (
    po_year.groupby(["MonthNum", "Month"], as_index=False)
           .agg(
               Avg_OTIF=("OTIF", "mean"),
               Avg_OnTime=("OnTime", "mean"),
               Avg_InFull=("PO_Fulfilled", "mean"),
               Total_Orders=("P. O. No", "count")
           )
           .sort_values("MonthNum")
)

# --- Consistent averaging (OTIF) ---
overall_yearly = po_year["OTIF"].mean()  # PO-level mean (this is the single OTIF KPI to show)

# --------------------------- KPIs ---------------------------
# Show only the PO-wise yearly OTIF average (plus On-Time, In-Full, Total Orders)
k1, k2, k3, k4 = st.columns(4)
k1.metric("OTIF (Yearly PO-level mean)", f"{(overall_yearly*100):.1f}%")
k2.metric("On-Time (Yearly mean)", f"{(po_year['OnTime'].mean()*100):.1f}%")
k3.metric("In-Full (Yearly mean)", f"{(po_year['PO_Fulfilled'].mean()*100):.1f}%")
k4.metric("Total Orders (Year)", int(po_year.shape[0]))

# --------------------------- MONTHLY CHART (Plotly) ---------------------------
st.subheader("📊 Monthly OTIF (Selected Year)")
if monthly.empty:
    st.info("No orders for the selected year.")
else:
    month_order = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
    present = [m for m in month_order if m in monthly["Month"].tolist()]
    fig = px.bar(
        monthly,
        x="Month",
        y="Avg_OTIF",
        category_orders={"Month": present},
        text=monthly["Avg_OTIF"].map(lambda v: f"{v*100:.1f}%"),
        labels={"Month": "Month", "Avg_OTIF": "Average OTIF"},
        height=420
    )
    fig.update_traces(textposition="outside")
    fig.update_yaxes(range=[0, 1], tickformat=".0%")
    fig.update_layout(margin=dict(l=20, r=20, t=40, b=20))
    st.plotly_chart(fig, use_container_width=True)

# --------------------------- MONTHLY TABLE ---------------------------
with st.expander("📄 Monthly Summary Table"):
    tbl = monthly.copy()
    for c in ["Avg_OTIF", "Avg_OnTime", "Avg_InFull"]:
        tbl[c] = (tbl[c] * 100).round(1)
    tbl = tbl.rename(columns={
        "MonthNum": "Month #",
        "Avg_OTIF": "Avg OTIF (%)",
        "Avg_OnTime": "Avg On-Time (%)",
        "Avg_InFull": "Avg In-Full (%)",
    })
    st.dataframe(tbl, use_container_width=True)

# --------------------------- TOP 10 VENDORS (breaches) & PDF Download ---------------------------
st.subheader("🚨 Top 10 Vendors with OTIF Breaches (Selected Year)")
breaches = po_year[po_year["OTIF"] == 0].copy()

if breaches.empty:
    st.success("No OTIF breaches in the selected year. 🎉")
    top10 = pd.DataFrame(columns=["Supplier", "OTIF_Breaches"])
    st.dataframe(top10, use_container_width=True)
else:
    top10 = (
        breaches.groupby("Supplier")
               .size()
               .reset_index(name="OTIF_Breaches")
               .sort_values("OTIF_Breaches", ascending=False)
               .head(10)
    )
    st.dataframe(top10, use_container_width=True)

    # PDF download: all failed orders grouped by supplier (desc by number of fails)
    if reportlab_available:
        try:
            pdf_bytes = generate_failed_orders_pdf(breaches[["Supplier", "GNR Dt", "P. O. No"]], selected_year)
            st.download_button(
                "⬇️ Download ALL Failed Orders (PDF)",
                data=pdf_bytes,
                file_name=f"OTIF_failed_orders_{selected_year}.pdf",
                mime="application/pdf"
            )
        except Exception as e:
            st.error(f"Error generating PDF: {e}")
            # fallback CSV
            csv_bytes = breaches[["Supplier", "GNR Dt", "P. O. No"]].sort_values(["Supplier", "GNR Dt"], ascending=[False, False]).to_csv(index=False).encode("utf-8")
            st.download_button(
                "⬇️ Download ALL Failed Orders (CSV fallback)",
                data=csv_bytes,
                file_name=f"OTIF_failed_orders_{selected_year}.csv",
                mime="text/csv"
            )
    else:
        st.warning("PDF export requires the `reportlab` package. Install it with `pip install reportlab` and restart the app.")
        csv_bytes = breaches[["Supplier", "GNR Dt", "P. O. No"]].sort_values(["Supplier", "GNR Dt"], ascending=[False, False]).to_csv(index=False).encode("utf-8")
        st.download_button(
            "⬇️ Download ALL Failed Orders (CSV)",
            data=csv_bytes,
            file_name=f"OTIF_failed_orders_{selected_year}.csv",
            mime="text/csv"
        )

# --------------------------- DOWNLOAD PO-level DATA ---------------------------
col1, col2 = st.columns([1.5, 1])
with col1:
    st.download_button(
        "⬇️ Download PO-level Data (CSV)",
        data=po_year.to_csv(index=False).encode("utf-8"),
        file_name=f"po_level_{selected_year}.csv",
        mime="text/csv",
    )
with col2:
    st.download_button(
        "⬇️ Download Monthly Summary (CSV)",
        data=monthly.to_csv(index=False).encode("utf-8"),
        file_name=f"monthly_otif_{selected_year}.csv",
        mime="text/csv",
    )

# --------------------------- DEBUG / SANITY (expander) ---------------------------
with st.expander("🔎 Debug / Sanity"):
    st.write("Selected Mat Types:", selected_types)
    st.write("Lead Time Rules (non-PPM):", lead_time_rules)
    st.write("Number of POs in year:", int(po_year.shape[0]))
    st.write("Overall yearly (PO-level OTIF):", overall_yearly)